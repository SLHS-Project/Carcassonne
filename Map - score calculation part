import java.util.TreeMap;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Arrays;
public class Map {

	private TreeMap<Tile, Point> map;
	private TreeMap<ArrayList<Tile>, Boolean> cities;
	private TreeMap<ArrayList<Integer>, String> farmlands;
	
	private Player red, yellow, blue, green;
	
	private int tileSize;
	private final int WIDTH=1600;
	private final int HEIGHT=760;
	
	private ArrayList<Tile> completedTiles;
	
	public Map (Player r, Player y, Player b, Player g)
	{
		red=r;
		yellow=y;
		blue=b;
		green=g;
		
		map=new TreeMap<>();
		cities=new TreeMap<>();
		farmlands=new TreeMap<>();
		
		tileSize=HEIGHT/4;
		completedTiles=new ArrayList<>();
	}
	
	//checks if any feature is completed
	public String complete (Tile tile)
	{
		String s="";
		if(completeRD(tile, ""))
			s+="RD ";
		if(completeC(tile))
			s+="C ";
		if(completeM(tile))
			s+="M";
		
		return s;
	}
	private boolean completeRD (Tile tile, String direction) 
	{
		if(!direction.equals(""))
		{
			
		}
		return true;
	}
	private boolean completeC (Tile tile)
	{
		//change the value of the key in "cities" to true once completed
		//check if this tile connects two different portion of cities, merge the arraylist in "cities" if so
		return true;
	}
	//receive the just placed tile, return the center monastery tile if completed, else return null
	private Tile completeM (Tile tile)
	{
		Tile MTile=null;
		return MTile;
	}
	
	//assume the just-placed tile completed a road, do score calculation
	public void roadScoring(Tile tile, Point loc)
	{
		Side[] s = tile.getSides();
		String temp="";
		for(int i=0; i<s.length; i++)
		{
			String[] ts=s[i].getSide();
			if(ts[1].equals("RD")) {
				if(i==0)
					temp+="N ";
				else if(i==1)
					temp+="W ";
				else if(i==2)
					temp+="S ";
				else
					temp+="E";
			}
		}
		//consists of the direction of the road: "N W"
		String[] rd=temp.split(" ");
		Point tempPt;
		String lineD="";
		//if the ending tile ends the road with a city or monastery or etc.
		if(rd.length==1) {
			if(rd[0].equals("N")) {
				tempPt=new Point((int)loc.getX(), (int)loc.getY()-tileSize);
				lineD+="S";}
			else if(rd[0].equals("W")) {
				tempPt=new Point((int)loc.getX()-tileSize, (int)loc.getY());
				lineD+="E";}
			else if(rd[0].equals("S")) {
				tempPt=new Point((int)loc.getX(), (int)loc.getY()+tileSize);
				lineD+="W";}
			else {
				tempPt=new Point((int)loc.getX()+tileSize, (int)loc.getY());
				lineD+="N";}
			
			rdScoring(findLoc(tempPt), lineD);
		}
		//if the road ends because of the crossroad
		else {
			//determine which side of the tile is road extended to complete
			//rd length either 3 or 4
			for(String str: rd)
			{
				if(completeRD(tile, str))
				{
					if(str.equals("N")) {
						tempPt=new Point((int)loc.getX(), (int)loc.getY()-tileSize);
						lineD+="S";}
					else if(str.equals("W")) {
						tempPt=new Point((int)loc.getX()-tileSize, (int)loc.getY());
						lineD+="E";}
					else if(str.equals("S")) {
						tempPt=new Point((int)loc.getX(), (int)loc.getY()+tileSize);
						lineD+="W";}
					else {
						tempPt=new Point((int)loc.getX()+tileSize, (int)loc.getY());
						lineD+="N";}
					rdScoring(findLoc(tempPt), lineD);
					break;
				}
			}
			//NEED to check for instance if one crossroad tile completes 2 distinct roads ************************
		}
		
		//tileCodes have all the tiles that the completed road is on
		//check for meeples
		String players=meepleCompare(completedTiles, "RD");
		scoreCalc(players, 1, completedTiles.size());
	}
	private void rdScoring(Tile tile, String lineD)
	{
		
		Side[] s = tile.getSides();
		String temp="";
		Point loc=map.get(tile);
		completedTiles.add(tile);
		
		for(int i=0; i<s.length; i++)
		{
			String[] ts=s[i].getSide();
			if(ts[1].equals("RD")) {
				if(i==0)
					temp+="N ";
				else if(i==1)
					temp+="W ";
				else if(i==2)
					temp+="S ";
				else
					temp+="E";
			}
		}
		//consists of the direction of the road: "N W"
		String[] rd=temp.split(" ");
		
		//first check if this tile is where the road ends
		if (rd.length==1 || tile.isCR())
			return ;
		
		//the road continues
		
		//find the location of the tile the road leads to
		Point tempPt;
		int i=0;
		if(rd[0].equals(lineD.substring(lineD.length()-1)))
			i=1;
		if(rd[i].equals("N")) {
			tempPt=new Point((int)loc.getX(), (int)loc.getY()-tileSize);
			lineD+="S";
		}
		else if(rd[i].equals("W")) {
			tempPt=new Point((int)loc.getX()-tileSize, (int)loc.getY());
			lineD+="E";}
		else if(rd[i].equals("S")) {
			tempPt=new Point((int)loc.getX(), (int)loc.getY()+tileSize);
			lineD+="N";}
		else {
			tempPt=new Point((int)loc.getX()+tileSize, (int)loc.getY());
			lineD+="W";}
			
		Tile tile1=findLoc(tempPt);
		rdScoring(tile1, lineD);
			
	}
	
	//assume the just-placed tile completed a city, do score calculation
	public void cityScoring(Tile tile)
	{
		ArrayList<Tile> C2Score=new ArrayList<>();
		for(ArrayList<Tile> a: cities.keySet()) {
			if(a.contains(tile.getCode()))
				C2Score=a;
		}
		
		String owners=meepleCompare(C2Score, "C");
		if (owners.length()<2)
			return;
		
		int shieldNum=0;
		for(Tile t: C2Score) {
			if(t.hasShield())
				shieldNum++;
		}
		int score=2*C2Score.size()+2*shieldNum;
		
		String[] p=owners.split(" ");
		for(String s: p) {
			callPlayer(s).addScore(score);
		}
	}

	//assume the just-placed tile completed a monastery, do score calculation
	//MTile is the tile with the monastery on it, this will be done via completeM
	public void monasteryScoring(Tile MTile, Point loc)
	{
		String name="";
		Meeple mp=MTile.getMeeple();
		if(mp!=null)
			name=mp.getColor();
		callPlayer(name).addScore(9);
	}
	
	private Tile findLoc(Point pt)
	{
		for(Tile t: map.keySet()) {
			if(map.get(t).equals(pt))
				return t;
		}
		System.out.println("Didn't find the tile at this location "+pt);
		return null;
	}
	
	private String meepleCompare(ArrayList<Tile> tiles, String type)
	{
		TreeMap<String, Integer> players=new TreeMap<>();
		for(Tile t: tiles)
		{
			Meeple meeple=t.getMeeple();
			if(meeple!=null) {
				if (meeple.getType().equals(type))
				{
					String owner=meeple.getColor();
					//add the owner of meeple to the treemap, but check if it exist first
					if(players.containsKey(owner))
						players.replace(owner, players.get(owner)+1);
					else
						players.put(owner, 1);
				}
			}
		}
		String line="";
		int i=0;
		for(String key: players.keySet()) {
			if(players.get(key)>i)
				line=key+" ";
			else if(players.get(key)==i)
				line+=key+" ";
		}
		return line;
	}
	//add the score to the player(s)    //spt = score per tile
	private void scoreCalc(String players, int spt, int tileCnt)
	{
		String[] p=players.split(" ");
		for(String s: p) {
			callPlayer(s).addScore(spt*tileCnt);
		}
	}
	
	private Player callPlayer(String name)
	{
		if(name.equals("red"))
			return red;
		else if(name.equals("yellow"))
			return yellow;
		else if(name.equals("blue"))
			return blue;
		else if(name.equals("green"))
			return green;
		System.out.println("DID NOT FIND A PLAYER WITH NAME "+name);
		return null;
	}

}

